from receptor_utils import simple_bio_seq as simple
from Bio import Entrez, SeqIO


wanted_assemblies = ['OL352718', 'MK587528', 'DOI: 10.1016/j.xgen.2022.100228 (Supplementary Table S4)', 'AC229888', 'MZ339373', 'P25_I19', 'P25_I30', 'X97051', 'AB019441', 'ON052093', 'GRCh38:CM000676.2', 'ON052094', 'ON052095', 'ON052096', 'ON052097', 'ON052098', 'ON052099', 'AH002720', 'ON052100', 'ON052101', 'ON052102', 'ON052103', 'ON052104', 'ON052105', 'ON052106', 'ON052107', 'ON052108', 'ON052109', 'ON052110', 'ON052111', 'ON052114', 'ON052112', 'ON052113', 'ON052115', 'ON052116', 'ON052117', 'ON052118', 'X86359', 'ON052119', 'ON023001', 'ON023002', 'ON023003', 'ON023004', 'ON023005', 'ON023006', 'ON023007', 'M99641', 'HM855840', 'ON052029', 'HM855850', 'HM855623', 'HM855734', 'HM855893', 'ON052030', 'MH779621', 'MN337615', 'M99642', 'MG719316', 'ON052031', 'MG719307', 'HM855936', 'ON052032', 'MG719308', 'MH779622', 'MN337616', 'AB019438', 'MG719319', 'ON052033', 'MG719320', 'MG719321', 'ON052034', 'MG719322', 'ON052035', 'MN337617', 'HM855931', 'MG719324', 'HM855905', 'ON052036', 'MK321684', 'ON052037', 'ON052038', 'MG719325', 'ON052039', 'KY198885', 'AB019437', 'ON052040', 'KY198939', 'Z14300', 'MG719327', 'KC713948', 'AC234135', 'MH359407', 'MK471382', 'MN337618', 'OU596106', 'M99637', 'MG719310', 'HM855769', 'ON052041', 'MG719311', 'HM855859', 'HM855563', 'MG719312', 'M99648', 'MG719334', 'ON052042', 'AB019440', 'MG719330', 'MG719332', 'ON052043', 'ON052044', 'MG719339', 'MK471379', 'MG719337', 'ON052045', 'KC713949', 'M99652', 'HM855540', 'ON052046', 'HM855512', 'HM855737', 'ON052047', 'HM855896', 'ON052048', 'HM855727', 'ON052049', 'OX384051', 'HM855885', 'ON052050', 'ON052051', 'M99656', 'M99657', 'HM855941', 'ON052052', 'MN337622', 'HM855876', 'ON052053', 'AB019439', 'HM855881', 'ON052054', 'MK308859', 'MN337623', 'OU596107', 'M99660', 'AC244492', 'ON052055', 'HM855868', 'AC206018', 'HM855669', 'HM855933', 'AC244456', 'AC234301', 'HM855914', 'ON052056', 'AC244411', 'KC713945', 'HM855790', 'HM855870', 'AC245243', 'AC253574', 'M77325', 'M99663', 'ON052059', 'ON052057', 'ON052058', 'OU596105', 'OX384049', 'HM855938', 'ON052060', 'OU596104', 'M99666', 'AC241995', 'AC234225', 'HM855932', 'M99669', 'KC162926', 'KC713943', 'AC233755', 'M99672', 'HM855751', 'ON052061', 'HM855590', 'KC713950', 'ON052062', 'BK010573', 'OW151136', 'HM855878', 'HM855819', 'M99675', 'HM855869', 'ON052063', 'HM855929', 'HM855544', 'HM855904', 'ON052064', 'HM855917', 'ON052065', 'HM855797', 'HM855748', 'M99679', 'HM855940', 'ON052066', 'ON052067', 'HM855879', 'MK308860', 'M99682', 'ON052068', 'ON052069', 'MN337624', 'MN337625', 'HM855533', 'ON052070', 'ON052071', 'HM855923', 'M99649', 'HM855935', 'ON052072', 'HM855741', 'ON052073', 'MN337620', 'BK010574', 'MN337619', 'HM855891', 'ON052074', 'HM855781', 'ON052075', 'HM855697', 'ON052076', 'HM855884', 'ON052077', 'M99651', 'HM855810', 'ON052078', 'HM855577', 'HM855778', 'KC713947', 'AC244463', 'MN337621', 'OU596108', 'HM855939', 'HM855685', 'KC162924', 'HM855856', 'ON052079', 'X92233', 'HM855793', 'ON052080', 'AC231260', 'HM855703', 'ON052081', 'KC713946', 'MH779624', 'OW151139', 'L10098', 'AC244476', 'ON052082', 'MK321691', 'HM855815', 'ON052083', 'ON052084', 'HM855897', 'ON052085', 'OU596110', 'OU596103', 'OW151140', 'HM855888', 'ON052086', 'MH779623', 'HM855907', 'KC713942', 'AC241513', 'MK471384', 'OU596101', 'HM855825', 'ON052087', 'HM855902', 'MK471385', 'MK321692', 'OW151138', 'HM855707', 'HM855842', 'ON052088', 'MK471386', 'OU596109', 'OX384050', 'ON360771', 'ON052089', 'M99686', 'MT078123', 'ON052090', 'MK321694', 'ON052091', 'HM855910', 'ON052092', 'MG719329', 'HM855930', 'HM855485', 'HM855821', 'HM855507', 'HM855826', 'HM774576', 'HM855681', 'AC279960', 'Z14214', 'MG719326', 'MG719335', 'AC280062', 'OP913455', 'AC244478', 'HM855855', 'AM940223', 'HM855413', 'HM855436', 'AC240376', 'AC279963', 'M83133', 'HM855916', 'HM855593', 'ON360894', 'HM855944', 'AC279152', 'AC279151', 'AC244452', 'AC279961', 'AC239196', 'OP255040', 'OP255593', 'AH002839', 'NG_000834', 'GRCh38:NC_000002.12', 'AC231119', 'X93623', 'AC245015', 'X93647', 'X72808', 'X93622', 'AC244255', 'OL352710', 'X93620', 'X93627', 'J00245', 'X72813', 'MW316670', 'MW316676', 'X93621', 'MW316672', 'MW316669', 'MW316671', 'X93626', 'OL352717', 'AC145029', 'X17263', 'X93624', 'NG_000833', 'AC243981', 'X93625', 'V00558', 'Z27498', 'AC245506', 'X72816', 'KM455560', 'X72817', 'X93628', 'MK308861', 'X93643', 'X93633', 'OL352729', 'X93632', 'X93644', 'X93635', 'FM164408', 'X93631', 'X93634', 'AC233264', 'X93630', 'U41644', 'X93636', 'X92342', 'X93638', 'X93639', 'X72815', 'X93637', 'X72820', 'Z27500', 'AC247037', 'X93640', 'AC243970', 'MW316673', 'OL352726', 'X93642', 'KM455568', 'X93641', 'D87023', 'Gibson:HG01106', 'GRCh38:NC_000022.11', 'Gibson:HG02572', 'D87017', 'Gibson:HG01109', 'Z73653', 'AC246793', 'D87009', 'Z73656', 'AC245291', 'D87010', 'Z73655', 'Z73654', 'D86999', 'MW316667', 'MW316668', 'Z73663', 'D87016', 'Gibson:NA12878', 'Z73662', 'D87018', 'Z73661', 'Gibson:HG02059', 'Z73676', 'AC245060', 'D86996', 'MW316678', 'MK308862', 'Gibson:HG02061', 'Gibson:NA18507', 'Gibson:HG01258', 'Z73657', 'AC245028', 'D86998', 'MK308863', 'CP068256', 'MW316674', 'Gibson:HG01358', 'Z22199', 'AC244250', 'D87015', 'Z73665', 'Z22196', 'D86994', 'Gibson:NA18508', 'Z22200', 'D87014', 'X97462', 'D87021', 'Z22208', 'X97464', 'Z73658', 'X97463', 'D87007', 'Gibson:NA18555', 'D87024', 'MK308864', 'MK308865', 'X97473', 'Z73652', 'D87000', 'Z73648', 'AC245517', 'D86993', 'Z73672', 'Z73668', 'Z73670', 'Z73671', 'Z73649', 'Z73669', 'Z73673', 'MW316677', 'MK308866', 'Z73659', 'Z22205', 'Gibson:NA19240', 'MW316675', 'MK308867', 'Z73650', 'D87022', 'Z73675', 'MZ339646', 'BK063799', 'NC_059450.1', 'NC_059442.1', 'NW_025550634.1', 'NC_048589.1', 'NC_048583.1']


# Fetch a sequence from genbank given the accession number
def get_genbank_sequence(acc):
    print(f'fetching: {acc}')
    Entrez.email = 'william@lees.org.uk'
    handle = Entrez.efetch(db='nucleotide', id=acc, rettype='fasta', retmode='text')
    patch = None

    seq_record = SeqIO.read(handle, "fasta")
    if '.' in seq_record.id:
        patch = seq_record.id.split('.')[-1:][0]
        accession_id = '.'.join(seq_record.id.split('.')[:-1])
    else:
        patch = ''
        accession_id = seq_record.id

    return {accession_id: str(seq_record.seq)}


seqs = {}
seqs = simple.read_fasta('wanted_assemblies.fasta')

for assembly in wanted_assemblies:
    assembly = assembly.replace('GRCh38:', '').replace('Gibson:', '')
    if assembly not in seqs:
        try:
            seqs.update(get_genbank_sequence(assembly))
        except Exception as e:
            print(f"Error fetching {assembly}: {e}")

simple.write_fasta('wanted_assemblies.fasta', seqs)
